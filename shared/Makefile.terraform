SHELL := /bin/bash

ifndef OP_SERVICE_ACCOUNT_TOKEN
	1p_creds = . $(HOME)/.creds/terraform@1password &&
endif

tf := terraform
tf_init := $(tf) init
tf_backend_config_path := ../shared/config.s3.tfbackend

ifeq ("$(notdir $(CURDIR))","bootstrap")
	tf_backend_config := <(grep -vE '^(access|secret)_key' $(tf_backend_config_path))
else
	tf_backend_config := <(op inject -i $(tf_backend_config_path))
	tf_init := $(1p_creds) $(tf_init) -backend-config=$(tf_backend_config)
endif

ifneq ("$(wildcard state-variables.tf)","")
	backend_vars := -var-file=$(tf_backend_config)
endif

ifeq ("$(notdir $(CURDIR))","bootstrap")
ifdef CI
	bootstrap_on_ci := 1
endif
endif

.PHONY: all init upgrade lint plan detect-drift provision destroy versions

all: provision

.terraform:
	$(MAKE) init

init:
	$(tf_init) $(tf_init_params)

upgrade: .terraform
	$(tf_init) -upgrade

lint: .terraform
	$(tf) fmt -recursive -check
	$(tf) validate

ifdef bootstrap_on_ci
plan:
	$(info Skipping bootstrapping when running on CI)

provision:
	$(info Skipping bootstrapping when running on CI)

destroy:
	$(info Skipping bootstrapping when running on CI)
else
plan: .terraform
	$(1p_creds) $(tf) plan $(tf_plan_params) $(backend_vars)

provision: .terraform
	$(1p_creds) $(tf) apply -auto-approve $(backend_vars)

destroy: .terraform
	$(1p_creds) $(tf) destroy $(backend_vars)
endif

detect-drift:
	$(MAKE) plan tf_plan_params=-detailed-exitcode

versions:
	@echo Terraform $(shell $(tf) version -json | jq -r .terraform_version)
